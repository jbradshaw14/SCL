FUNCTION_BLOCK "Analog_Instrument_FB"

VAR_INPUT
  Input_Tag : INT;
  Config : "AnalogInput_cfg";
  AlarmON : BOOL;
END_VAR

VAR_OUTPUT
  Scaled : REAL;
  AlarmWord : WORD; // bit 0:hw 1:ha 2:hasd 3:lw 4:la 5:lasd
  Error : WORD; // 1: No Data, 2: Open Line, 3: Undercurrent
END_VAR

VAR
  Alarm_Logic : "Alarm_Logic_FB";
END_VAR

VAR_TEMP
  procVal : REAL;
  int2Real : REAL;
  gradient : REAL;
END_VAR

VAR CONSTANT
  ANALOG : REAL := 1.0;         // type = 0
  HIGH_PRESSURE : REAL := 0.14504;   // type = 1
  LOW_PRESSURE : REAL := 0.014504;  // type = 2
  HIGH_FLOW : REAL := 0.1;       // type = 3
  LOW_FLOW : REAL := 0.01;      // type = 4
  DEG_F : REAL := 0.025;     // type = 5
  IOLink_NO_DATA : INT := 32764;
  IOLink_OPEN_LINE : INT := 32760;
  IOLink_UL : INT := - 32760;
  UNDER_CURRENT : INT := 3200;
  NO_SIGNAL : INT := 0;
END_VAR

region IOLink_Type
    CASE #Config.TYPE OF
        0 :
            #gradient := #ANALOG;
        1 :
            #gradient := #HIGH_PRESSURE;
        2 :
            #gradient := #LOW_PRESSURE;
        3 :
            #gradient := #HIGH_FLOW;
        4 :
            #gradient := #LOW_FLOW;
        5 :
            #gradient := #DEG_F;
        ELSE :
            #gradient := 1.0;
    END_CASE;
end_region

region Scale_and_Calibrate_Input
    #int2Real := INT_TO_REAL(#Input_Tag);
    IF #gradient <> #ANALOG THEN
        #procVal := #Config.Coefficient * (#int2Real * #gradient) + #Config.Offset;
        IF #Input_Tag = #IOLink_NO_DATA THEN
            #Error := 1;
        ELSIF #Input_Tag = #IOLink_OPEN_LINE THEN
            #Error := 2;
        ELSIF #Input_Tag = #IOLink_UL THEN
            #Error := 4;
        ELSE
            #Error := 0;
        END_IF;
    ELSE
        #procVal := SCALE_X(MIN := #Config.Min,
                        VALUE := #int2Real,
                        MAX := #Config.Max);
        IF #Input_Tag < #UNDER_CURRENT AND #Input_Tag > #NO_SIGNAL THEN
            #Error := 4;
            ELSIF #Input_Tag <= #NO_SIGNAL THEN
                #Error := 2;
            ELSE
                #Error := 0;
        END_IF;
    END_IF;
    #Scaled := #procVal;
end_region

region Alarm_Logic
    #Alarm_Logic(AlarmON := #AlarmON,
                 ProcVal := #procVal,
                 Config := #Config,
                 AlarmWord => #AlarmWord);
end_region
