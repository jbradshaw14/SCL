FUNCTION_BLOCK "Analog_Output"

VAR_INPUT
  Control_Active : BOOL;
  Setpoint_In : REAL;
  ManualMode : BOOL;
  Interlock : BOOL;
  Control_Type : INT; // 0: PID or Constant Setpoint 1:P Only
  P_Coefficent : REAL;
  Process_Variable : REAL;
  Level_Switch_Tag : BOOL;
  Input_UI : REAL;
END_VAR

VAR_OUTPUT
  Output_to_HMI : REAL; // in %
END_VAR

VAR_IN_OUT
  Output_Tag : INT;
END_VAR

VAR CONSTANT
SPAN : REAL := 16000.0;
LRV : REAL := 4000.0;
END_VAR


region PID_OR_SETPOINT
    IF #Control_Type = 0 THEN
        IF #ManualMode THEN
            "Real%toInt_mA"(Input := #Input_UI,
                            Output => #Output_Tag);
        ELSE
            IF #Control_Active AND NOT #Interlock THEN
                "Real%toInt_mA"(Input := #Setpoint_In,
                                Output => #Output_Tag);
            ELSE
                "Real%toInt_mA"(Input := 0.0,
                                Output => #Output_Tag);
            END_IF;
        END_IF;
    END_IF;
end_region

region P_ONLY
    IF #Control_Type = 1 THEN
        IF #ManualMode THEN
            "Real%toInt_mA"(Input := #Setpoint_In,
                             Output => #Output_Tag);
        ELSE
            IF #Control_Active AND #Level_Switch_Tag AND NOT #Interlock THEN
                #Output_Tag := REAL_TO_INT(((#SPAN / #P_Coefficent) * #Process_Variable) + #LRV);
            ELSE
                "Real%toInt_mA"(Input := 0.0,
                                Output => #Output_Tag);
            END_IF;
        END_IF;
    END_IF;
end_region

"mA_to_%"(Val_IN := #Output_Tag,
          Output => #Output_to_HMI);